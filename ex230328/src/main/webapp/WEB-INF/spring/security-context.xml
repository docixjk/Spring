<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-5.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

	<security:http pattern="/css/" security="none" />

	<security:http>
		<security:intercept-url pattern="/top.jsp"
			access="permitAll()" />
		<security:intercept-url pattern="/admin/**"
			access="hasAuthority('ROLE_ADMIN')" />
		<security:intercept-url pattern="/**"
			access="isAuthenticated()" />
		<security:form-login default-target-url="/top.jsp" />
		<security:logout logout-url="/logout"
			logout-success-url="/top.jsp" />
		<security:csrf disabled="true" />
	</security:http>

	<security:authentication-manager>
		<!-- 실질적으로 인증을 확인하고 실제로 등록되어있는 대상인지 확인함 -->
		<security:authentication-provider>
			<!-- data를 들고있는 bean을 참조한다 -->
			<!-- users-by-username-query은 인증 처리 -->
			<!-- authorities-by-username-query은 권한을 처리 -->
			<security:jdbc-user-service
				data-source-ref="dataSource"
				users-by-username-query="
				select LOGIN_ID, PASSWORD, 1
                  from T_USER
                 where LOGIN_ID = ?"
				authorities-by-username-query="
				select LOGIN_ID, ROLE_NAME
                  from T_ROLE
                 inner join T_USER_ROLE on T_ROLE.ID = T_USER_ROLE.ROLE_ID
                 inner join T_USER on T_USER_ROLE.USER_ID = T_USER.ID
                 where LOGIN_ID = ?" />
                 <!-- ↓ 로그인할때 사용하는 비밀번호의 복호화작업을 실행함 ( 들어오는 data에 대해 암호화 작업해애함 ) -->
                 <security:password-encoder hash="bcrypt"/>
		</security:authentication-provider>
	</security:authentication-manager>
</beans>
